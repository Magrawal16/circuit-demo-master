// using ids for connections to allow for easier serialization and deserialization
// test
export type CircuitElement = {
  id: string;
  x: number;
  y: number;
  rotation?: number; // rotation angle in degrees (0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330)
  nodes: Node[];
  connecters?: ElementConnecter[];
  type: string;

  properties?: {
    voltage?: number; // for power sources like batteries
    resistance?: number; // all components can have resistance
    ratio?: number; // for potentiometers, the ratio of resistance
  mode?: "voltage" | "current" | "resistance"; // multimeter modes: V, A, Î©
    distance?: number; // cm
    temperature?: number;
    brightness?: number;
    color?: string;
  };
  computed?: {
    current?: number; // computed current through the element
    voltage?: number; // computed voltage across the element
    power?: number; // computed power consumed or generated by the element
    measurement?: number; // Specific reading for multimeter
  };
  controller?: {
    [key: string]: unknown;
    leds?: number[][];
    pins?: Record<string, { digital?: number; analog?: number }>; // <-- analog added
    temperature?: number;
    brightness?: number;
    logoTouched?: boolean; // <-- optional snapshot of logo state
  };
  wires?: Wire[];
  displayProperties?: string[];
};

export type Wire = {
  toNodeId: string;
  fromNodeId: string;
  id: string;
  resistance?: number;
  color?: string; // Optional color for the wire
  joints: { x: number; y: number }[];
};

export type Node = {
  id: string;
  x: number;
  y: number;
  parentId: string;
  polarity?: "positive" | "negative"; // Optional polarity for the node
  placeholder?: string;
  fillColor?: string;
};

export type ElementConnecter = {
  id: string;
  parentId: string;
  x: number;
  y: number;
  state?: string;
};

export type Size =
  | { width: number; height: number; radius?: never }
  | { radius: number; width?: never; height?: never };

export type EditingWire = {
  wireId: string;
  end: "from" | "to";
};

export type CircuitElementProps = {
  type: string;
  idNumber: number;
  pos: { x: number; y: number };
  rotation?: number;
  properties?: {
    resistance?: number;
    voltage?: number;
    ratio?: number;
    temperature?: number;
    brightness?: number;
    color?: string;
  };
};

export type PaletteElementType =
  | "lightbulb"
  | "battery"
  | "powersupply"
  | "resistor"
  | "multimeter"
  | "potentiometer"
  | "led"
  | "microbit"
  | "ultrasonicsensor4p"
  | "microbitWithBreakout";

export type PropertiesPanelProps = {
  selectedElement: CircuitElement | null;
  wires: Wire[];
  getNodeById: (id: string) => Node | undefined;
  onElementEdit: (
    updatedElement: CircuitElement,
    deleteElement: boolean
  ) => void;
  onWireEdit: (updatedWire: Wire, deleteElement: boolean) => void;
  onEditWireSelect?: (wire: Wire) => void;
  setOpenCodeEditor: (open: boolean) => void;
  wireColor?: string;
};

// ----------------------
// Microbit-specific types
// ----------------------

// Controller input now supports the logo touch sensor:
export type ControllerInput =
  | "A"
  | "B"
  | "AB"
  | { type: "logo"; state: "pressed" | "released" };

export interface MicrobitProps {
  id: string;
  x: number;
  y: number;
  selected?: boolean;

  // Accepts buttons and the logo touch sensor
  onControllerInput?: (input: ControllerInput) => void;

  leds: number[][] [];

  // Allow analog alongside digital to match simulator capabilities
  pins: Record<string, { digital?: number; analog?: number }>;

  isSimulationOn?: boolean;
}

export interface BaseElementProps {
  id: string;
  x: number;
  y: number;
  selected?: boolean;
}
